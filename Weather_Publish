import paho.mqtt.client as mqtt

import requests

import json

import time


def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))
    client.subscribe("weather")

def on_message(client, userdata, msg):
    global next_spray_time

    api_key = "19b21c8ed496b716ea542ad051cfb170"
    forecast_url = f"http://api.openweathermap.org/data/2.5/forecast?q=Coventry&appid={api_key}"

    response = requests.get(forecast_url)
    data = response.json()

    if 'weather' in data and len(data['weather']) > 0 and 'description' in data['weather'][0] and 'rain' not in data['weather'][0]['description'].lower():
        if 'rain' not in data or '3h' not in data['rain'] or float(data['rain']['3h']) == 0:
            # if the forecast predicts no rain for the next three hours, spray now
            print("Start spraying!")
            mqtt.publish(client, "weather", json.dumps(data))
        else:
            # if the forecast predicts rain within the next three hours, reschedule by 5 hours
            next_spray_time = time.time() + (3600 * 5)
            print("Rescheduling spraying for later")
    else:
        # if the forecast predicts rain, reschedule by 5 hours
        next_spray_time = time.time() + (3600 * 5)
        print("Rescheduling spraying for later")

    time.sleep(3600 * 5)

next_spray_time = time.time()

client = mqtt.Client("WeatherClient")
client.on_connect = on_connect
client.on_message = on_message

mqttBroker = "broker.hivemq.com"
client.connect(mqttBroker, 1883)

client.loop_start() # Start the MQTT loop so that the client can subscribe and receive messages

client.loop_forever() # Run the loop until the program is manually stopped
